{"ast":null,"code":"const rlp = require('rlp');\n\nconst ethUtil = require('ethereumjs-util');\n\nmodule.exports = TrieNode;\n\nfunction TrieNode(type, key, value) {\n  if (Array.isArray(type)) {\n    // parse raw node\n    this.parseNode(type);\n  } else {\n    this.type = type;\n\n    if (type === 'branch') {\n      var values = key;\n      this.raw = Array.apply(null, Array(17));\n\n      if (values) {\n        values.forEach(function (keyVal) {\n          this.set.apply(this, keyVal);\n        });\n      }\n    } else {\n      this.raw = Array(2);\n      this.setValue(value);\n      this.setKey(key);\n    }\n  }\n}\n\nTrieNode.isRawNode = isRawNode;\nTrieNode.addHexPrefix = addHexPrefix;\nTrieNode.removeHexPrefix = removeHexPrefix;\nTrieNode.isTerminator = isTerminator;\nTrieNode.stringToNibbles = stringToNibbles;\nTrieNode.nibblesToBuffer = nibblesToBuffer;\nTrieNode.getNodeType = getNodeType;\nObject.defineProperty(TrieNode.prototype, 'value', {\n  get: function () {\n    return this.getValue();\n  },\n  set: function (v) {\n    this.setValue(v);\n  }\n});\nObject.defineProperty(TrieNode.prototype, 'key', {\n  get: function () {\n    return this.getKey();\n  },\n  set: function (k) {\n    this.setKey(k);\n  }\n}); // parses a raw node\n\nTrieNode.prototype.parseNode = function (rawNode) {\n  this.raw = rawNode;\n  this.type = getNodeType(rawNode);\n}; // sets the value of the node\n\n\nTrieNode.prototype.setValue = function (key, value) {\n  if (this.type !== 'branch') {\n    this.raw[1] = key;\n  } else {\n    if (arguments.length === 1) {\n      value = key;\n      key = 16;\n    }\n\n    this.raw[key] = value;\n  }\n};\n\nTrieNode.prototype.getValue = function (key) {\n  if (this.type === 'branch') {\n    if (arguments.length === 0) {\n      key = 16;\n    }\n\n    var val = this.raw[key];\n\n    if (val !== null && val !== undefined && val.length !== 0) {\n      return val;\n    }\n  } else {\n    return this.raw[1];\n  }\n};\n\nTrieNode.prototype.setKey = function (key) {\n  if (this.type !== 'branch') {\n    if (Buffer.isBuffer(key)) {\n      key = stringToNibbles(key);\n    } else {\n      key = key.slice(0); // copy the key\n    }\n\n    key = addHexPrefix(key, this.type === 'leaf');\n    this.raw[0] = nibblesToBuffer(key);\n  }\n}; // returns the key as a nibble\n\n\nTrieNode.prototype.getKey = function () {\n  if (this.type !== 'branch') {\n    var key = this.raw[0];\n    key = removeHexPrefix(stringToNibbles(key));\n    return key;\n  }\n};\n\nTrieNode.prototype.serialize = function () {\n  return rlp.encode(this.raw);\n};\n\nTrieNode.prototype.hash = function () {\n  return ethUtil.sha3(this.serialize());\n};\n\nTrieNode.prototype.toString = function () {\n  var out = this.type;\n  out += ': [';\n  this.raw.forEach(function (el) {\n    if (Buffer.isBuffer(el)) {\n      out += el.toString('hex') + ', ';\n    } else if (el) {\n      out += 'object, ';\n    } else {\n      out += 'empty, ';\n    }\n  });\n  out = out.slice(0, -2);\n  out += ']';\n  return out;\n};\n\nTrieNode.prototype.getChildren = function () {\n  var children = [];\n\n  switch (this.type) {\n    case 'leaf':\n      // no children\n      break;\n\n    case 'extention':\n      // one child\n      children.push([this.key, this.getValue()]);\n      break;\n\n    case 'branch':\n      for (var index = 0, end = 16; index < end; index++) {\n        var value = this.getValue(index);\n\n        if (value) {\n          children.push([[index], value]);\n        }\n      }\n\n      break;\n  }\n\n  return children;\n};\n/**\n * @param {Array} dataArr\n * @returns {Buffer} - returns buffer of encoded data\n * hexPrefix\n **/\n\n\nfunction addHexPrefix(key, terminator) {\n  // odd\n  if (key.length % 2) {\n    key.unshift(1);\n  } else {\n    // even\n    key.unshift(0);\n    key.unshift(0);\n  }\n\n  if (terminator) {\n    key[0] += 2;\n  }\n\n  return key;\n}\n\nfunction removeHexPrefix(val) {\n  if (val[0] % 2) {\n    val = val.slice(1);\n  } else {\n    val = val.slice(2);\n  }\n\n  return val;\n}\n/**\n * Determines if a key has Arnold Schwarzenegger in it.\n * @method isTerminator\n * @param {Array} key - an hexprefixed array of nibbles\n */\n\n\nfunction isTerminator(key) {\n  return key[0] > 1;\n}\n/**\n * Converts a string OR a buffer to a nibble array.\n * @method stringToNibbles\n * @param {Buffer| String} key\n */\n\n\nfunction stringToNibbles(key) {\n  var bkey = new Buffer(key);\n  var nibbles = [];\n\n  for (var i = 0; i < bkey.length; i++) {\n    var q = i * 2;\n    nibbles[q] = bkey[i] >> 4;\n    ++q;\n    nibbles[q] = bkey[i] % 16;\n  }\n\n  return nibbles;\n}\n/**\n * Converts a nibble array into a buffer.\n * @method nibblesToBuffer\n * @param arr\n */\n\n\nfunction nibblesToBuffer(arr) {\n  var buf = new Buffer(arr.length / 2);\n\n  for (var i = 0; i < buf.length; i++) {\n    var q = i * 2;\n    buf[i] = (arr[q] << 4) + arr[++q];\n  }\n\n  return buf;\n}\n/**\n * Determines the node type.\n * @returns {String} - the node type\n *   - leaf - if the node is a leaf\n *   - branch - if the node is a branch\n *   - extention - if the node is an extention\n *   - unknown - if something else got borked\n */\n\n\nfunction getNodeType(node) {\n  if (node.length === 17) {\n    return 'branch';\n  } else if (node.length === 2) {\n    var key = stringToNibbles(node[0]);\n\n    if (isTerminator(key)) {\n      return 'leaf';\n    }\n\n    return 'extention';\n  }\n}\n\nfunction isRawNode(node) {\n  return Array.isArray(node) && !Buffer.isBuffer(node);\n}","map":{"version":3,"sources":["/Users/piyushmaheshwari/Downloads/pos-plasma-tutorial-exit-pos-plasma/node_modules/merkle-patricia-tree/trieNode.js"],"names":["rlp","require","ethUtil","module","exports","TrieNode","type","key","value","Array","isArray","parseNode","values","raw","apply","forEach","keyVal","set","setValue","setKey","isRawNode","addHexPrefix","removeHexPrefix","isTerminator","stringToNibbles","nibblesToBuffer","getNodeType","Object","defineProperty","prototype","get","getValue","v","getKey","k","rawNode","arguments","length","val","undefined","Buffer","isBuffer","slice","serialize","encode","hash","sha3","toString","out","el","getChildren","children","push","index","end","terminator","unshift","bkey","nibbles","i","q","arr","buf","node"],"mappings":"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","sourcesContent":["const rlp = require('rlp')\nconst ethUtil = require('ethereumjs-util')\n\nmodule.exports = TrieNode\n\nfunction TrieNode (type, key, value) {\n  if (Array.isArray(type)) {\n    // parse raw node\n    this.parseNode(type)\n  } else {\n    this.type = type\n    if (type === 'branch') {\n      var values = key\n      this.raw = Array.apply(null, Array(17))\n      if (values) {\n        values.forEach(function (keyVal) {\n          this.set.apply(this, keyVal)\n        })\n      }\n    } else {\n      this.raw = Array(2)\n      this.setValue(value)\n      this.setKey(key)\n    }\n  }\n}\n\nTrieNode.isRawNode = isRawNode\nTrieNode.addHexPrefix = addHexPrefix\nTrieNode.removeHexPrefix = removeHexPrefix\nTrieNode.isTerminator = isTerminator\nTrieNode.stringToNibbles = stringToNibbles\nTrieNode.nibblesToBuffer = nibblesToBuffer\nTrieNode.getNodeType = getNodeType\n\nObject.defineProperty(TrieNode.prototype, 'value', {\n  get: function () {\n    return this.getValue()\n  },\n  set: function (v) {\n    this.setValue(v)\n  }\n})\n\nObject.defineProperty(TrieNode.prototype, 'key', {\n  get: function () {\n    return this.getKey()\n  },\n  set: function (k) {\n    this.setKey(k)\n  }\n})\n\n// parses a raw node\nTrieNode.prototype.parseNode = function (rawNode) {\n  this.raw = rawNode\n  this.type = getNodeType(rawNode)\n}\n\n// sets the value of the node\nTrieNode.prototype.setValue = function (key, value) {\n  if (this.type !== 'branch') {\n    this.raw[1] = key\n  } else {\n    if (arguments.length === 1) {\n      value = key\n      key = 16\n    }\n    this.raw[key] = value\n  }\n}\n\nTrieNode.prototype.getValue = function (key) {\n  if (this.type === 'branch') {\n    if (arguments.length === 0) {\n      key = 16\n    }\n\n    var val = this.raw[key]\n    if (val !== null && val !== undefined && val.length !== 0) {\n      return val\n    }\n  } else {\n    return this.raw[1]\n  }\n}\n\nTrieNode.prototype.setKey = function (key) {\n  if (this.type !== 'branch') {\n    if (Buffer.isBuffer(key)) {\n      key = stringToNibbles(key)\n    } else {\n      key = key.slice(0) // copy the key\n    }\n\n    key = addHexPrefix(key, this.type === 'leaf')\n    this.raw[0] = nibblesToBuffer(key)\n  }\n}\n\n// returns the key as a nibble\nTrieNode.prototype.getKey = function () {\n  if (this.type !== 'branch') {\n    var key = this.raw[0]\n    key = removeHexPrefix(stringToNibbles(key))\n    return (key)\n  }\n}\n\nTrieNode.prototype.serialize = function () {\n  return rlp.encode(this.raw)\n}\n\nTrieNode.prototype.hash = function () {\n  return ethUtil.sha3(this.serialize())\n}\n\nTrieNode.prototype.toString = function () {\n  var out = this.type\n  out += ': ['\n  this.raw.forEach(function (el) {\n    if (Buffer.isBuffer(el)) {\n      out += el.toString('hex') + ', '\n    } else if (el) {\n      out += 'object, '\n    } else {\n      out += 'empty, '\n    }\n  })\n  out = out.slice(0, -2)\n  out += ']'\n  return out\n}\n\nTrieNode.prototype.getChildren = function () {\n  var children = []\n  switch (this.type) {\n    case 'leaf':\n      // no children\n      break\n    case 'extention':\n      // one child\n      children.push([this.key, this.getValue()])\n      break\n    case 'branch':\n      for (var index = 0, end = 16; index < end; index++) {\n        var value = this.getValue(index)\n        if (value) {\n          children.push([\n            [index], value\n          ])\n        }\n      }\n      break\n  }\n  return children\n}\n\n/**\n * @param {Array} dataArr\n * @returns {Buffer} - returns buffer of encoded data\n * hexPrefix\n **/\nfunction addHexPrefix (key, terminator) {\n  // odd\n  if (key.length % 2) {\n    key.unshift(1)\n  } else {\n    // even\n    key.unshift(0)\n    key.unshift(0)\n  }\n\n  if (terminator) {\n    key[0] += 2\n  }\n\n  return key\n}\n\nfunction removeHexPrefix (val) {\n  if (val[0] % 2) {\n    val = val.slice(1)\n  } else {\n    val = val.slice(2)\n  }\n\n  return val\n}\n\n/**\n * Determines if a key has Arnold Schwarzenegger in it.\n * @method isTerminator\n * @param {Array} key - an hexprefixed array of nibbles\n */\nfunction isTerminator (key) {\n  return key[0] > 1\n}\n\n/**\n * Converts a string OR a buffer to a nibble array.\n * @method stringToNibbles\n * @param {Buffer| String} key\n */\nfunction stringToNibbles (key) {\n  var bkey = new Buffer(key)\n  var nibbles = []\n\n  for (var i = 0; i < bkey.length; i++) {\n    var q = i * 2\n    nibbles[q] = bkey[i] >> 4\n    ++q\n    nibbles[q] = bkey[i] % 16\n  }\n  return nibbles\n}\n\n/**\n * Converts a nibble array into a buffer.\n * @method nibblesToBuffer\n * @param arr\n */\nfunction nibblesToBuffer (arr) {\n  var buf = new Buffer(arr.length / 2)\n  for (var i = 0; i < buf.length; i++) {\n    var q = i * 2\n    buf[i] = (arr[q] << 4) + arr[++q]\n  }\n  return buf\n}\n\n/**\n * Determines the node type.\n * @returns {String} - the node type\n *   - leaf - if the node is a leaf\n *   - branch - if the node is a branch\n *   - extention - if the node is an extention\n *   - unknown - if something else got borked\n */\nfunction getNodeType (node) {\n  if (node.length === 17) {\n    return 'branch'\n  } else if (node.length === 2) {\n    var key = stringToNibbles(node[0])\n    if (isTerminator(key)) {\n      return 'leaf'\n    }\n\n    return 'extention'\n  }\n}\n\nfunction isRawNode (node) {\n  return Array.isArray(node) && !Buffer.isBuffer(node)\n}\n"]},"metadata":{},"sourceType":"script"}