{"ast":null,"code":"module.exports = PrioritizedTaskExecutor;\n/**\n * Executes tasks up to maxPoolSize at a time, other items are put in a priority queue.\n * @class PrioritizedTaskExecutor\n * @param {Number} maxPoolSize The maximum size of the pool\n * @prop {Number} maxPoolSize The maximum size of the pool\n * @prop {Number} currentPoolSize The current size of the pool\n * @prop {Array} queue The task queue\n */\n\nfunction PrioritizedTaskExecutor(maxPoolSize) {\n  this.maxPoolSize = maxPoolSize;\n  this.currentPoolSize = 0;\n  this.queue = [];\n}\n/**\n * Executes the task.\n * @param {Number} priority The priority of the task\n * @param {Function} task The function that accepts the callback, which must be called upon the task completion.\n */\n\n\nPrioritizedTaskExecutor.prototype.execute = function (priority, task) {\n  var self = this;\n\n  if (self.currentPoolSize < self.maxPoolSize) {\n    self.currentPoolSize++;\n    task(function () {\n      self.currentPoolSize--;\n\n      if (self.queue.length > 0) {\n        self.queue.sort(function (a, b) {\n          return b.priority - a.priority;\n        });\n        var item = self.queue.shift();\n        self.execute(item.priority, item.task);\n      }\n    });\n  } else {\n    self.queue.push({\n      priority: priority,\n      task: task\n    });\n  }\n};","map":{"version":3,"sources":["/Users/piyushmaheshwari/Downloads/pos-plasma-tutorial-exit-pos-plasma/node_modules/merkle-patricia-tree/prioritizedTaskExecutor.js"],"names":["module","exports","PrioritizedTaskExecutor","maxPoolSize","currentPoolSize","queue","prototype","execute","priority","task","self","length","sort","a","b","item","shift","push"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,uBAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,uBAAT,CAAkCC,WAAlC,EAA+C;AAC7C,OAAKA,WAAL,GAAmBA,WAAnB;AACA,OAAKC,eAAL,GAAuB,CAAvB;AACA,OAAKC,KAAL,GAAa,EAAb;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAH,uBAAuB,CAACI,SAAxB,CAAkCC,OAAlC,GAA4C,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AACpE,MAAIC,IAAI,GAAG,IAAX;;AAEA,MAAIA,IAAI,CAACN,eAAL,GAAuBM,IAAI,CAACP,WAAhC,EAA6C;AAC3CO,IAAAA,IAAI,CAACN,eAAL;AACAK,IAAAA,IAAI,CAAC,YAAY;AACfC,MAAAA,IAAI,CAACN,eAAL;;AACA,UAAIM,IAAI,CAACL,KAAL,CAAWM,MAAX,GAAoB,CAAxB,EAA2B;AACzBD,QAAAA,IAAI,CAACL,KAAL,CAAWO,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B,iBAAOA,CAAC,CAACN,QAAF,GAAaK,CAAC,CAACL,QAAtB;AACD,SAFD;AAGA,YAAIO,IAAI,GAAGL,IAAI,CAACL,KAAL,CAAWW,KAAX,EAAX;AACAN,QAAAA,IAAI,CAACH,OAAL,CAAaQ,IAAI,CAACP,QAAlB,EAA4BO,IAAI,CAACN,IAAjC;AACD;AACF,KATG,CAAJ;AAUD,GAZD,MAYO;AACLC,IAAAA,IAAI,CAACL,KAAL,CAAWY,IAAX,CAAgB;AACdT,MAAAA,QAAQ,EAAEA,QADI;AAEdC,MAAAA,IAAI,EAAEA;AAFQ,KAAhB;AAID;AACF,CArBD","sourcesContent":["module.exports = PrioritizedTaskExecutor\n\n/**\n * Executes tasks up to maxPoolSize at a time, other items are put in a priority queue.\n * @class PrioritizedTaskExecutor\n * @param {Number} maxPoolSize The maximum size of the pool\n * @prop {Number} maxPoolSize The maximum size of the pool\n * @prop {Number} currentPoolSize The current size of the pool\n * @prop {Array} queue The task queue\n */\nfunction PrioritizedTaskExecutor (maxPoolSize) {\n  this.maxPoolSize = maxPoolSize\n  this.currentPoolSize = 0\n  this.queue = []\n}\n\n/**\n * Executes the task.\n * @param {Number} priority The priority of the task\n * @param {Function} task The function that accepts the callback, which must be called upon the task completion.\n */\nPrioritizedTaskExecutor.prototype.execute = function (priority, task) {\n  var self = this\n\n  if (self.currentPoolSize < self.maxPoolSize) {\n    self.currentPoolSize++\n    task(function () {\n      self.currentPoolSize--\n      if (self.queue.length > 0) {\n        self.queue.sort(function (a, b) {\n          return b.priority - a.priority\n        })\n        var item = self.queue.shift()\n        self.execute(item.priority, item.task)\n      }\n    })\n  } else {\n    self.queue.push({\n      priority: priority,\n      task: task\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}