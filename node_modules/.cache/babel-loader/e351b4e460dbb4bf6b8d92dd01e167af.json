{"ast":null,"code":"/* Copyright (c) 2012-2016 LevelUP contributors\n * See list at <https://github.com/level/levelup#contributing>\n * MIT License\n * <https://github.com/level/levelup/blob/master/LICENSE.md>\n */\nvar util = require('./util');\n\nvar WriteError = require('level-errors').WriteError;\n\nvar getOptions = util.getOptions;\nvar dispatchError = util.dispatchError;\n\nfunction Batch(levelup, codec) {\n  this._levelup = levelup;\n  this._codec = codec;\n  this.batch = levelup.db.batch();\n  this.ops = [];\n  this.length = 0;\n}\n\nBatch.prototype.put = function (key_, value_, options) {\n  options = getOptions(options);\n\n  var key = this._codec.encodeKey(key_, options);\n\n  var value = this._codec.encodeValue(value_, options);\n\n  try {\n    this.batch.put(key, value);\n  } catch (e) {\n    throw new WriteError(e);\n  }\n\n  this.ops.push({\n    type: 'put',\n    key: key,\n    value: value\n  });\n  this.length++;\n  return this;\n};\n\nBatch.prototype.del = function (key_, options) {\n  options = getOptions(options);\n\n  var key = this._codec.encodeKey(key_, options);\n\n  try {\n    this.batch.del(key);\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  this.ops.push({\n    type: 'del',\n    key: key\n  });\n  this.length++;\n  return this;\n};\n\nBatch.prototype.clear = function () {\n  try {\n    this.batch.clear();\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  this.ops = [];\n  this.length = 0;\n  return this;\n};\n\nBatch.prototype.write = function (callback) {\n  var levelup = this._levelup;\n  var ops = this.ops;\n\n  try {\n    this.batch.write(function (err) {\n      if (err) {\n        return dispatchError(levelup, new WriteError(err), callback);\n      }\n\n      levelup.emit('batch', ops);\n\n      if (callback) {\n        callback();\n      }\n    });\n  } catch (err) {\n    throw new WriteError(err);\n  }\n};\n\nmodule.exports = Batch;","map":{"version":3,"sources":["/Users/piyushmaheshwari/Downloads/pos-plasma-tutorial-exit-pos-plasma/node_modules/levelup/lib/batch.js"],"names":["util","require","WriteError","getOptions","dispatchError","Batch","levelup","codec","_levelup","_codec","batch","db","ops","length","prototype","put","key_","value_","options","key","encodeKey","value","encodeValue","e","push","type","del","err","clear","write","callback","emit","module","exports"],"mappings":"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","sourcesContent":["/* Copyright (c) 2012-2016 LevelUP contributors\n * See list at <https://github.com/level/levelup#contributing>\n * MIT License\n * <https://github.com/level/levelup/blob/master/LICENSE.md>\n */\n\nvar util = require('./util')\nvar WriteError = require('level-errors').WriteError\nvar getOptions = util.getOptions\nvar dispatchError = util.dispatchError\n\nfunction Batch (levelup, codec) {\n  this._levelup = levelup\n  this._codec = codec\n  this.batch = levelup.db.batch()\n  this.ops = []\n  this.length = 0\n}\n\nBatch.prototype.put = function (key_, value_, options) {\n  options = getOptions(options)\n\n  var key = this._codec.encodeKey(key_, options)\n  var value = this._codec.encodeValue(value_, options)\n\n  try {\n    this.batch.put(key, value)\n  } catch (e) {\n    throw new WriteError(e)\n  }\n\n  this.ops.push({ type: 'put', key: key, value: value })\n  this.length++\n\n  return this\n}\n\nBatch.prototype.del = function (key_, options) {\n  options = getOptions(options)\n\n  var key = this._codec.encodeKey(key_, options)\n\n  try {\n    this.batch.del(key)\n  } catch (err) {\n    throw new WriteError(err)\n  }\n\n  this.ops.push({ type: 'del', key: key })\n  this.length++\n\n  return this\n}\n\nBatch.prototype.clear = function () {\n  try {\n    this.batch.clear()\n  } catch (err) {\n    throw new WriteError(err)\n  }\n\n  this.ops = []\n  this.length = 0\n\n  return this\n}\n\nBatch.prototype.write = function (callback) {\n  var levelup = this._levelup\n  var ops = this.ops\n\n  try {\n    this.batch.write(function (err) {\n      if (err) { return dispatchError(levelup, new WriteError(err), callback) }\n      levelup.emit('batch', ops)\n      if (callback) { callback() }\n    })\n  } catch (err) {\n    throw new WriteError(err)\n  }\n}\n\nmodule.exports = Batch\n"]},"metadata":{},"sourceType":"script"}